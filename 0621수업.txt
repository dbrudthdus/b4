# 상품 게시판

### 0620

파일 업로드 db 연결

파일 업로드 삭제
delete 방식: ajax로 통신하는 건 기본적으로 RESTFul하게 설계, json 데이터 이용

1. dto 생성: PathVariable 사용하지 않고 dto 사용
2. REST 컨트롤러 개발
리턴 타입 Map: 결과를 json 형태로 처리하려고
@RequestBody: json 데이터로 변환
3. regist.html 수정
4. 화면 확인 (서버, nginx 구동)

----------> xxxxxxxxxxxx
delete 방식은 페이로드가 없음 -> 추가적인 json 데이터를 받지 못함xxxxxxxxxxXXXXXXXXXXXXXXXX

delete + @PathVariable로 설계 수정

1. regist.html axios.delete 경로 수정 (url로 파일 이름 받도록)
2. controller 수정
@PathVariable -> dto가 필요 없어짐
파일 객체 생성 -> 마임타입 확인 후 썸네일 객체 생성하고 삭제
    
    → 화면에서 사라지는지, 폴더에서 실제로 파일이 삭제됐는지 확인
    

게시글 작성 중 첨부파일을 업로드 했다가 해당 창에서 벗어난 경우

1.  뒤로 가거나 창을 닫을 때 → 컨펌 창 띄워주기 (정말 나갈 건지)
2. 작업 끝내기로 강제 종료 시

Window History API

- 스택 형태로 히스토리가 쌓임 → 이로 인해 뒤로 가기가 가능

디비와 디스크에 있는 데이터를 비교해서 디비에 없는 파일을 삭제하는 게 가장 확실한 방법

→ 대용량 처리 → 스프링 배치(batch) → Crontab에 스케쥴러로 월일시를 지정하면 그 시간에 삭제 작업 진행

## 디비 연결

- 디비엔 파일 데이터를 넣으면 안 됨 → BLOB를 쓸 순 있지만 조회가 너무 오래 걸림
- 대표 파일 처리 → radio button(하나만 선택 가능)
- 데이터가 __, __, __ 처럼 들어갈 땐 테이블을 하나 더 만들 것
    
    → 상품, 첨부파일 디비 따로 설계
    
    첨부 파일 테이블: uuid(pk), pno, fileName, 이미지 순번 
    
- mapper 개발(list)하고 테스트 (mapper scan 어노테이션 확인)

- RegisterDTO 생성

       → 상품 등록할 때 쓸거니까 (pname, price, status) (uuid, fileName 필요)

- Controller → @PostMapping → string  registerPost → “redirect:/product/list”

- postman

→ uriencoded 지정  (오늘은 문자열만 처리하니까 key값으로만 떨어진다)

→ pname (테스트상품)

→ price (500)

 테스트 후 추가

 → fileNames (파일)

 → fileNames(파일) (2개 추가 할거임)

- 화면 구성
    1. form tag 생성, click 이벤트 걸기
        
        ★☆★register를 눌렀을 때 dom을 생성해서 form 안에 input:hidden 타입으로 넣어주고 넘겨줘야 함
        
        li 태그 안의 uuid, fileName을 가져오면 편함
        
        → data- : html 규칙을 위반하지 않으면서 속성 값을 원하는대로 지정, 대문자 써도 모두 소문자로 변환됨 → 호출할 때 소문자로
        
    2. querySelectorAll(”li”) : 배열 반환 → if문으로 유효성 검사 (첨부파일 없는 경우)
    3. input:hidden 태그 만들어서 uuid, fileName 값 넣기
    

3번 주자

last_insert_id : 마지막으로 추가한 pno 값을 추출

List.of() : 값 여러개 한 번에 넣기

람다식 : this 사용 불가

0620 정리
딜리트 매핍: 페이로드 전달 불가능 -> 패스 배리어블 사용
디비 설계: ord, join(부분 범위 처리)
화면: 실제 업로드 작업 처리

### 0621

### Product Regist 기능 개발 (파일 업로드)

1. ProductService 개발
    
    AOP? 성능이 떨어지는 쿼리를 찾아줌
    
2. Controller 개발
    
    RedirectAttribute (addFlashAttribute): 한 번만 값을 전달하고 싶을 때
    
    http header
    

### List 개발 (대표 이미지 1장, 페이징 처리)

1. ProductService 개발
    
    builderName withAll: 생성자는 생성 방식에 제한을 두는 것
    
    빌더는 생성자 갯수에 상관 없이 생성 가능(생성자를 각각 따로 만들지 않아도 됨)
    
    빌더 네임 속성을 준 이유는 생성자처럼 사용하기 위해서
    
2. Controller 개발
    
    파라미터로 PageRequestDTO, Model을 받음 → 페이지 리퀘스트 dto는 자동으로 model 속성에 포함됨
    
3. view 개발
    - th:src 에서 | http://_______
        
        파이프 라인을 쓰면 편하게 경로를 쓸 수 있음 → 문자열 결합
        
    - a th:href=”@{|/product/modify/${dto.pno}|(page=${pageRequestDTO.size.page}, size=%{pageRequestDTO.size}}” : 쿼리 스트링 처리 (조회 링크)
        
        → 원래는 read 페이지지만 modify로 처리
        

### Modify 개발

1. 조회했다가 목록으로 다시 가는 경우★
    - PageRequestDTO: Controller에서 리스트, 조회, 수정 설계할 때 반드시 파라미터로 받아야 함
2. Controller (GET)
    
    파라미터: pno(ProductDTO를 구하기 위해, model에 담음), PageRequestDTO, Model
    
    상품 조회 기능을 구현해야 함 (dto, mapper, service 필요)
    
3. view
    
    상품 데이터 출력 → axios로 이미지 목록 가져와서 출력
    
    axios로 호출할 url 기능 개발 필요
    
    수정 버튼을 누르면 등록 작업과 동일한 효과(post) → 상품 데이터, 첨부파일 수정
    
4. Controller (POST)
    
    DTO: 상품 테이블 수정(등록 과정과 동일)→ 기존의 첨부파일은 삭제 → 새로 등록한 첨부파일을 다시 디비에 업로드
    
5. Service 개발
    
    상품 데이터 수정
    
    → 기존 첨부파일을 db에서 삭제
    
    → dto에 있는 첨부파일 db에 추가 (일련의 과정이기 때문에 트랜잭션 필요 all or nothing)
    
6. 수정 페이지에서 첨부 파일 x 누른 채로 창을 나갔을 때 
    
    → 이미지는 삭제됐지만 db엔 남아있는 문제 발생
    
    → 화면에서만 파일을 지우고 form submit(수정 버튼)을 눌렀을 때 기존 파일 목록을 불러와서 디        비 갱신 작업이 끝나면 디비와 비교해서 삭제
    
- 커뮤니티 사이트에서 각각의 게시판마다 테이블을 만들지 않음 → 고유의 코드 번호로 게시판 구분
- void와 return 타입
    - void: 특별한 일이 없으면 성공해야 하는 작업 → 실패 시 예외 처리
    - return: 정말 필요한 데이터가 있을 때
    
1. ProductDTO 정의
    
    @Builder는 All, NoAtrgsControuctor와 항상 함께 추가
    
2. Mapper 개발
    
    // 조회
    
    ProductDTO selectOne(Integer pno); → @Select 어노테이션으로 쿼리문 처리
    
    List<String> selectImages(Integer pno); → @Select 어노테이션으로 쿼리문 처리
    
3. Service 개발
    
    // 조회
    
    ProductDTO get(Integer pno);
    
    List<String> getImages(Integer pno);
    
4. Controller 개발
    
    // 수정
    
    public String modifyGet 수정
    
    // get 이미지
    
    public List<String> getImages (@PathVariable(”pno”)
    
    →  ResponseBody: 이미지를 json으로 받음
    
5. 화면 개발
    
    // 수정 화면 조회
    
    pno, pname 출력해보기
    
    // 이미지 출력
    axios 태그 가져오기
    
    ```
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script th:inline="javascript">
    ```
    
    loadImages 함수 만들기
    
- 람다식 : java에선 ->, javaScript에선 =>
	const array1 = [1, 4, 9, 16];

	// Pass a function to map
	const map1 = array1.map(x => x * 2);

	console.log(map1);
	// Expected output: Array [2, 8, 18, 32]

    test